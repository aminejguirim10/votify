// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?      @unique
  emailVerified      DateTime?
  image              String?
  description        String?
  password           String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  accounts           Account[]
  sessions           Session[]
  votingRoomsCreated VotingRoom[]
  votes              Vote[]       @relation(fields: [votesIds], references: [id])
  votesIds           String[]     @map("votes_ids") @db.ObjectId
  votingRoomsIds     String[]     @map("voting_rooms_ids") @db.ObjectId
  votingRooms        VotingRoom[] @relation("VotingRooms", fields: [votingRoomsIds], references: [id])

  @@map("users")
}

model VotingRoom {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  votes          Vote[]
  deadline       DateTime
  votingRoomCode String   @unique
  creatorId      String   @map("creator_id") @db.ObjectId
  creator        User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  votersIds      String[] @map("voters_ids") @db.ObjectId
  voters         User[]   @relation("VotingRooms", fields: [votersIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("voting_rooms")
}

model Vote {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  vote         String
  url          String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  votingRoomId String     @map("voting_room_id") @db.ObjectId
  votingRoom   VotingRoom @relation(fields: [votingRoomId], references: [id], onDelete: Cascade)
  usersIds     String[]   @map("users_ids") @db.ObjectId
  users        User[]     @relation(fields: [usersIds], references: [id])

  @@map("votes")
}
